<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用SpringBoot JPA进行自定义的保存及批量保存</title>
      <link href="/2019/06/03/shi-yong-springboot-jpa-jin-xing-zi-ding-yi-de-bao-cun-ji-pi-liang-bao-cun/"/>
      <url>/2019/06/03/shi-yong-springboot-jpa-jin-xing-zi-ding-yi-de-bao-cun-ji-pi-liang-bao-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>SpringBoot版本：2.1.4.RELEASE</p><p>java版本：1.8</p><p>文中所说JPA皆指spring-boot-starter-data-jpa</p><h2 id="使用JPA保存一个Student对象"><a href="#使用JPA保存一个Student对象" class="headerlink" title="使用JPA保存一个Student对象"></a>使用JPA保存一个Student对象</h2><p>在JPA中保存一个对象，仅需要该对象，一个仓储即可。<br>StudentDO实体类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_student"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> String seq<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>JPA仓储：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepo</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>StudentDO<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>一般的，我们只需要调用StudentRepo.save()方法即可完成对实体对象的保存操作。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentDO student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setSeq</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        studentRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="在插入过程中使用mysql函数"><a href="#在插入过程中使用mysql函数" class="headerlink" title="在插入过程中使用mysql函数"></a>在插入过程中使用mysql函数</h2><p>如果我们希望student的seq值由系统自动生成，且生成规则为“yyMMdd + 8位自增序列”（例如19060310000000）又该如何实现呢？</p><p>首先想到的是该如何生成这一串序列，mysql不像oracle自身支持sequence，因此在这里可以借用函数以及额外的sequence表来实现这一操作，网上有很多实现方式，这里就不再赘述。</p><p>现在已经有了函数getseq(‘student_seq’)可以获取到该序列，该如何将其应用到保存对象的方法中？显然的一个问题是，像上面那样再直接调用save方法已经行不通了，应该得需要自定义插入的sql实现。</p><p>一个容易想到的办法是，在StudentDO类上使用注解@SQLInsert来定义insert的实现，它写起来应该会像这个样子：</p><pre><code>@SQLInsert(sql = &quot;INSERT INTO t_student(seq, name, sex) VALUES (getseq(&#39;student_seq&#39;), ?, ?&quot;)</code></pre><p>这条sql语句本身并没有什么问题，再次调用save()方法也确实能够执行。但是很可惜，它确会抛出一个sql异常：</p><pre><code>java.sql.SQLException: Parameter index out of range (3 &gt; number of parameters, which is 2).</code></pre><p>显然是程序认为有多少个参数，就得有多少个“?”与之匹配，目前我并没有找到解决这个问题的方案，所以这种方法宣告失败。</p><p>既然@SQLInsert行不通，或许可以考虑使用@Query注解来自定义一个实现。我们可以在StudentRepo中定义这样一个方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"INSERT INTO t_student(seq, name, sex) VALUES (getseq('student_seq'), :#{#student.name}, :#{#student.sex})"</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span> StudentDO student<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>试着运行一下，结果很成功，对象被正常的存储到数据库中，并且seq的取值也正常。看上去我们的问题已经得到了解决，但事实真的如此么？</p><h2 id="自定义的批量存储"><a href="#自定义的批量存储" class="headerlink" title="自定义的批量存储"></a>自定义的批量存储</h2><p>上面的例子中，我们成功通过JPA调用了mysql函数将对象存储到数据库中。但上面的例子只提供了单个保存的方法，如果我们想批量保存呢？@Query里面的sql能够进行改造么？我并没有找到@Query中使用List<object>作为参数的insert方法，但是这并不代表这一操作不能执行。JPA仍旧提供给了使用者原始的使用方式：利用EntityManager来构造sql并执行。</object></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@PersistenceContext</span>    <span class="token keyword">private</span> EntityManager entityManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">batchInsert</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>StudentDO<span class="token operator">></span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_student(seq, name, sex) VALUES "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>StudentDO student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"(getseq('student_seq'), ?, ?),"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String sql <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createNativeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paramIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>StudentDO student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>            query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>paramIndex<span class="token operator">++</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>paramIndex<span class="token operator">++</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>就像MyBatis一样，使用者也可以自定义SQL来执行，试试看，同样没有问题，再多的数据也可以被保存到数据库中！批量保存的效果达到了。</p><p>再仔细想一想，通过上面的过程，还有什么问题么？对比JPA自带的save()方法，似乎我们的自定义保存返回的都是int结果，也就是操作影响的数据库行数。使用过JPA的人都应该了解，JPA的save()方法（或者其他JPA方法）返回的对象是经过持久化的，得益于这一特性，使用者可以在调用save()方法之后获取到对象的id等必须先插入到数据库之后才会有的值。显然这里的操作已经失去了这一特性，那如果我们把返回值对应的改为Object或者List<object>可以做到么？答案是并不能，我们会得到如下异常：</object></p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>InvalidDataAccessApiUsageException<span class="token operator">:</span> Modifying queries can only use <span class="token keyword">void</span> or <span class="token keyword">int</span><span class="token operator">/</span>Integer as <span class="token keyword">return</span> type<span class="token operator">!</span><span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token operator">:</span> Modifying queries can only use <span class="token keyword">void</span> or <span class="token keyword">int</span><span class="token operator">/</span>Integer as <span class="token keyword">return</span> type<span class="token operator">!</span></code></pre><p>insert方法必须使用@Modifying进行注解，而@Modifying注解的方法又只能返回int类型的结果。这种情况下或许只能先利用查询得到seq的值再进行操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于JPA的使用还不够了解，一些复杂的情况下没有找到最理想的实现方案。</p><ol><li>@Query注解中是否能够使用List<object>以及实现动态拼接参数的效果没有得到解决</object></li><li>自定义的sql语句返回持久化对象的问题没有方案</li></ol><p>在以后的使用了解中希望能够找到解决办法，将问题记录在这里，以便后续查看。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/13/hello-world/"/>
      <url>/2019/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
