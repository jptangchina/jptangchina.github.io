<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go语言中的标识符可见性</title>
      <link href="/2019/10/09/go-yu-yan-zhong-de-biao-shi-fu-ke-jian-xing/"/>
      <url>/2019/10/09/go-yu-yan-zhong-de-biao-shi-fu-ke-jian-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言中的标识符可见性"><a href="#Go语言中的标识符可见性" class="headerlink" title="Go语言中的标识符可见性"></a>Go语言中的标识符可见性</h2><p>Go语言中变量首字母大写，代表其对其他包可见，反之代表不可见。具体到实际使用中，有如下一些体现。</p><h3 id="1-同包的可见性"><a href="#1-同包的可见性" class="headerlink" title="1. 同包的可见性"></a>1. 同包的可见性</h3><p>同一个包内代码的标识符始终具有可见性。例如在<code>main</code>包下面有两个go文件，分别为<code>computer.go</code>与<code>mian.go</code>，代码分别如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// computer.go</span><span class="token keyword">package</span> main<span class="token keyword">type</span> computer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    brand <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// main.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    computer <span class="token operator">:=</span> computer<span class="token punctuation">{</span><span class="token string">"华硕"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上述代码的目的是打印出电脑的品牌信息，测试执行不会有任何问题，可见同包下的变量是始终可见的。</p><h3 id="2-不同包的可见性"><a href="#2-不同包的可见性" class="headerlink" title="2. 不同包的可见性"></a>2. 不同包的可见性</h3><p>现在，将<strong>1</strong>中代码的computer.go转移至computer包下，代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// computer.go</span><span class="token keyword">package</span> computer<span class="token keyword">type</span> computer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    brand <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><p>此时即便是<code>main.go</code>文件中引入了computer包也无法使用computer结构及其属性，编译器提示<code>Unexported type &#39;computer&#39; usage</code>异常，因为此处computer及其属性都没有大写首字母，因此无法再被访问，修改后的代码应该如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// computer.go</span><span class="token keyword">package</span> computer<span class="token keyword">type</span> Computer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Brand <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// main.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"tests/computer"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    computer <span class="token operator">:=</span> computer<span class="token punctuation">.</span>Computer<span class="token punctuation">{</span><span class="token string">"华硕"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span>Brand<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>事实上，还可以在<code>computer.go</code>中创建工厂函数返回computer对象，并且computer对象及其属性并不需要暴露出去，代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//computer.go</span><span class="token keyword">package</span> computer<span class="token keyword">type</span> computer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    brand <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>brand <span class="token builtin">string</span><span class="token punctuation">)</span> computer <span class="token punctuation">{</span>    <span class="token keyword">return</span> computer<span class="token punctuation">{</span>brand<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>尽管这样做编译并没有问题，但是在main函数中实际仍不能通过computer.brand获取computer的值，对于属性而言，这里的<code>brand</code>仍旧需要对外暴露。同时需要注意的是，此种写法IDE会有警告：<code>Exported function with unexported type</code>。</p><p>这里其实主要思考的是这样一个问题：为什么没有暴露的对象可以在其他类中被获取到？</p><p>对比Java语言，其实效果是一样的，对于包内可见的类与属性，虽然可以通过其他类获取到，但是仍然不能调用类中的方法对类进行操作。</p><p>按照<code>《Go语言实战（中文版）》</code>一书中给出的解释是，要让这个行为可行，需要满足两个条件：</p><blockquote><p>第一，公开或者未公开的标识符，不是一个值</p><p>第二，短变量声明操作符，有能力捕获引用的类型，并创建一个未公开的类型的变量。</p><p>永远不能显示创建一个未公开的变量，不过短变量声明操作符可以这么做。</p></blockquote><h3 id="3-内嵌对象的可见性"><a href="#3-内嵌对象的可见性" class="headerlink" title="3. 内嵌对象的可见性"></a>3. 内嵌对象的可见性</h3><p>内嵌对象如果本身可见，那跟之前的描述差不多，就不再赘述。这里主要描述下内嵌对象本身不可见的情况。例如，在上述<code>computer</code>结构中增加一个类型为<code>screen</code>的结构：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// computer.go</span><span class="token keyword">package</span> computer<span class="token keyword">type</span> Computer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    screen    Brand <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> screen <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Brand <span class="token builtin">string</span>    Size <span class="token builtin">int</span><span class="token punctuation">}</span></code></pre><p>这里的screen是没有对外暴露的，也就是说，我们不能像下面这样来初始化一个computer对象：</p><pre class=" language-go"><code class="language-go">    computer <span class="token operator">:=</span> computer<span class="token punctuation">.</span>Computer <span class="token punctuation">{</span>        Brand<span class="token punctuation">:</span> <span class="token string">"华硕"</span><span class="token punctuation">,</span>        screen<span class="token punctuation">:</span> computer<span class="token punctuation">.</span>screen <span class="token punctuation">{</span>            Size<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span></code></pre><p>但是利用Go语言的特性，尽管screen本身没有对外暴露，但是其属性却以对外暴露的形式被提升到了computer中，所以可以这样对其赋值：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"tests/computer"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    computer <span class="token operator">:=</span> computer<span class="token punctuation">.</span>Computer <span class="token punctuation">{</span>        Brand<span class="token punctuation">:</span> <span class="token string">"华硕"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    computer<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token number">24</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span>Size<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Go语言中通过字母大小写来判定是否可以对外访问。但不可访问不等于不可获取，同样的，结构不可访问不等于属性不可访问，在实际使用中需要仔细甄别。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Go语言实战》</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次升级SpringCloud Gateway路由转发的问题</title>
      <link href="/2019/09/20/ji-yi-ci-sheng-ji-springcloud-gateway-lu-you-zhuan-fa-de-wen-ti/"/>
      <url>/2019/09/20/ji-yi-ci-sheng-ji-springcloud-gateway-lu-you-zhuan-fa-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文中使用的SpringBoot版本：2.1.7.RELEASE，SpringCloud依赖版本：Greenwich.SR3。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在配置一个简单的路由转发时，同样的配置，转发到了不同的路径。配置如下：</p><pre class=" language-yml"><code class="language-yml">spring:  cloud:    gateway:      routes:        - id: baidu_route          uri: https://baidu.com:443/          predicates:            - Path=/baidu</code></pre><p>目的是想当访问localhost:8080时，跳转到<code>https://baidu.com</code>。但是升级了SpringCloud版本后，实际却是跳转到了<code>https://baidu.com/baidu</code>。并且莫名其妙的使用浏览器访问不进入断点，使用Postman发请求确可以进入，很奇怪。</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>首先回顾下SpringCloud Gateway的工作原理图：<br><img src="https://s2.ax1x.com/2019/09/20/nObDL4.png" alt="SpringCloud Gateway 工作原理"><br>从图上可以得知，在进入执行过滤器之前，需要做路由匹配，所以理论上不会在执行过滤器之前就已经对路由地址做了修改，处理过程应该发生在Filter Chain中。</p><p>由于本文没有采用任何自定义的Filter，因此图中执行的Filter都是GlobalFilters。可以通过Debug或者集成actuator的方式，查看具体执行了哪些Filter：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@303c55fa"</span><span class="token operator">:</span>-<span class="token number">2147482648</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@1319bc2a"</span><span class="token operator">:</span><span class="token number">10100</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@b0fd744"</span><span class="token operator">:</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.filter.NettyRoutingFilter@502a4156"</span><span class="token operator">:</span><span class="token number">2147483647</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.filter.ForwardRoutingFilter@92d1782"</span><span class="token operator">:</span><span class="token number">2147483647</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@72976b4"</span><span class="token operator">:</span><span class="token number">2147483646</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@64e1377c"</span><span class="token operator">:</span>-<span class="token number">2147483648</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@5416f8db"</span><span class="token operator">:</span>-<span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.filter.ForwardPathFilter@6a1ef65c"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"org.springframework.cloud.gateway.filter.GatewayMetricsFilter@726934e2"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span></code></pre><p>按照执行顺序从后往前打断点发现，对于URI的处理主要发生在RouteToRequestUrlFilter中。对比新旧版本的代码可以发现，最新版的代码中有这样一段代码：</p><pre class=" language-java"><code class="language-java">URI mergedUrl <span class="token operator">=</span> UriComponentsBuilder<span class="token punctuation">.</span><span class="token function">fromUri</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scheme</span><span class="token punctuation">(</span>routeUri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span>routeUri<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span>routeUri<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>GATEWAY_REQUEST_URL_ATTR<span class="token punctuation">,</span> mergedUrl<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而与之对应的旧版本中代码如下：</p><pre class=" language-java"><code class="language-java">URI mergedUrl <span class="token operator">=</span> UriComponentsBuilder<span class="token punctuation">.</span><span class="token function">fromUri</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>routeUri<span class="token punctuation">)</span><span class="token punctuation">;</span>exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>GATEWAY_REQUEST_URL_ATTR<span class="token punctuation">,</span> mergedUrl<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中参数uri为配置文件中predicates的Path路径，routeUri为配置文件中的uri参数。由此可见，在旧版本代码中，重定向的地址即为配置文件的uri，而在新版本中，将Path与uri进行了整合。至此，真相大白。</p><h2 id="修改处理"><a href="#修改处理" class="headerlink" title="修改处理"></a>修改处理</h2><p>如果在实际的情况中，确实有这么一种情况：重定向的URI与原始访问的URI路由不一致，该怎么解决呢？<br>首先想到的是查看是否能够排除部分默认执行的GlobalFilter，很遗憾我并没有找到相关配置。并且查看Bean加载过程可以发现，只有部分GlobalFilter与依赖类有关，大部分都是不依赖于任何配置加载的。此部分源码位于<code>GatewayAutoConfiguration</code>类中，有兴趣的同学可以自行查看。</p><p>既然无法排除，那第二个办法就是采用自定义的Filter进行处理。在本例中，可以在<code>RouteToRequestUrlFilter</code>执行之前手动将Path置空或者在其之后重新处理URI，关键代码分别如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 置空Path</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"MyFilter start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exchange <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 重新处理URI</span>Route route <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>GATEWAY_ROUTE_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>route <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"MyFilter start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>URI uri <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> encoded <span class="token operator">=</span> <span class="token function">containsEncodedParts</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>URI routeUri <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>URI mergedUrl <span class="token operator">=</span> UriComponentsBuilder<span class="token punctuation">.</span><span class="token function">fromUri</span><span class="token punctuation">(</span>routeUri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>GATEWAY_REQUEST_URL_ATTR<span class="token punctuation">,</span> mergedUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然针对具体情况具体分析，这里只是提供一种思路。或许还有其他的方式可以做到，这里我也没有读完官方的全部文档（看得脑壳痛）。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内环境本地搭建Minikube</title>
      <link href="/2019/09/05/guo-nei-huan-jing-ben-di-da-jian-minikube/"/>
      <url>/2019/09/05/guo-nei-huan-jing-ben-di-da-jian-minikube/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文中Minikube版本为v1.3.1，Docker版本为19.03.1，VirtualBox版本为6.0.8 r130520 (Qt5.6.3)。</p><p>本文主要说明如何解决拉取镜像失败的问题，至于其他安装步骤，<a href="https://minikube.sigs.k8s.io/docs/start/" target="_blank" rel="noopener">官方教程</a>已经说明的非常详细，此处不再赘述。  </p><p>由于一些众所周知的原因，在使用默认配置搭建Minikube环境时，因为无法拉取镜像等问题而导致失败。本文主要通过使用阿里镜像进行替换操作。</p><h2 id="来自某度的解决方案"><a href="#来自某度的解决方案" class="headerlink" title="来自某度的解决方案"></a>来自某度的解决方案</h2><p>如果在某度上搜索，大部分的解答可能都是手动从阿里镜像仓库拉取，缺什么拉什么，然后对Image镜像重新tag。包括最近在看的《重新定义Spring Cloud实战》一书中也是使用此方式解决。但在最新版本环境下，可能有如下镜像需要手动拉取：</p><pre><code>k8s.gcr.io/kube-proxy                v1.15.2k8s.gcr.io/kube-apiserver            v1.15.2k8s.gcr.io/kube-scheduler            v1.15.2k8s.gcr.io/kube-controller-manager   v1.15.2k8s.gcr.io/coredns                   1.3.1k8s.gcr.io/etcd                      3.3.10k8s.gcr.io/pause                     3.1</code></pre><p>即便是能解决问题，也会稍显麻烦。</p><h2 id="使用阿里云的镜像加速进行拉取"><a href="#使用阿里云的镜像加速进行拉取" class="headerlink" title="使用阿里云的镜像加速进行拉取"></a>使用阿里云的镜像加速进行拉取</h2><p>参考链接<a href="https://yq.aliyun.com/articles/221687" target="_blank" rel="noopener">Minikube - Kubernetes本地实验环境</a></p><p>主要在Minikube启动时加入参数<code>--registry-mirror=https://xxxxxx.mirror.aliyuncs.com(镜像加速器地址)</code>来拉取镜像，并且提供了一个<a href="https://github.com/AliyunContainerService/minikube" target="_blank" rel="noopener">修改版的Minikube</a>于github上。</p><h2 id="使用–image-repository参数配置镜像仓库地址"><a href="#使用–image-repository参数配置镜像仓库地址" class="headerlink" title="使用–image-repository参数配置镜像仓库地址"></a>使用–image-repository参数配置镜像仓库地址</h2><p>此方式是我最后采用的方式。在较新版本的Minikube中，可以使用此配置执行镜像仓库地址。例如这里可以指定<code>--image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</code>，在启动时，控制台会提示使用该仓库拉取镜像。关于–image-repository，官方的说明是：</p><blockquote><p>Alternative image repository to pull docker images from. This can be used when you have<br>limited access to gcr.io. Set it to “auto” to let minikube decide one for you. For Chinese mainland users, you may use<br>local gcr.io mirrors such as registry.cn-hangzhou.aliyuncs.com/google_containers</p></blockquote><p>最后，对于–registry-mirror与–image-repository的差异，官方也在github上进行了回复：<a href="https://github.com/kubernetes/minikube/pull/3714" target="_blank" rel="noopener">#3714</a></p><blockquote><p>I believe –registry-mirror only impacts those images with no repository prefix - images that come from the Docker official registry.<br>It won’t work on images from private registries, which is the case like gcr.io/kube-proxy. For private images, docker will still go to the private registry and fetch them.<br>If you set up minikube with –registry-mirror, it could work for pods/deployments that use ubuntu/18.04, but not for gcr.io/ - you will need to wipe the “gcr.io/“ out from the references to make it look like an image from the official registry. For the latter case, it could be achieved using –registry-mirror <a href="https://private_server" target="_blank" rel="noopener">https://private_server</a> –image-registry [private_server/]google_containers</p></blockquote><p>最后，Minikube配置完成。</p><pre><code>➜  ~ minikube start --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers😄  minikube v1.3.1 on Darwin 10.14.4✅  Using image repository registry.cn-hangzhou.aliyuncs.com/google_containers🔥  Creating virtualbox VM (CPUs=2, Memory=2000MB, Disk=20000MB) ...🐳  Preparing Kubernetes v1.15.2 on Docker 18.09.8 ...🚜  拉取镜像 ...🚀  正在启动 Kubernetes ...⌛  Waiting for: apiserver proxy etcd scheduler controller dns🏄  Done! kubectl is now configured to use &quot;minikube&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minikube </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud微服务ClientException:Load balancer does not have available server for client异常解决方案</title>
      <link href="/2019/08/25/springcloud-wei-fu-wu-clientexception-load-balancer-does-not-have-available-server-for-client-yi-chang-jie-jue-fang-an/"/>
      <url>/2019/08/25/springcloud-wei-fu-wu-clientexception-load-balancer-does-not-have-available-server-for-client-yi-chang-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>最近在使用最新版本的SpringCloud编写demo时发现的问题。使用Feign在进行服务间调用时，会提示异常：</p><pre class=" language-java"><code class="language-java">ClientException<span class="token operator">:</span>Load balancer does not have available server <span class="token keyword">for</span> xxx</code></pre><p>使用的版本为：</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Greenwich.SR2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><p>提示信息已经很明确了。在早期的F版本左右，搭建一个简单的调用实例，是不需要显示的指明Ribbon配置的，但是在最新的版本中，需要主动指明启用Ribbon或单独进行配置。现将问题记录于此以便查阅。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="早期版本可能的方案"><a href="#早期版本可能的方案" class="headerlink" title="早期版本可能的方案"></a>早期版本可能的方案</h3><p>如果在某度上搜索这个问题，其中之一的解决方案是，引入</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  </code></pre><p>同样的，这可能是早期版本的解决方案，并不适用现在的版本。事实上，如果去中央仓库上查看这个包，会发现其已经被标记为<code>deprecated</code>，并且推荐使用<code>spring-cloud-starter-netflix-eureka-client</code>替代。</p><h3 id="最新版本的方案"><a href="#最新版本的方案" class="headerlink" title="最新版本的方案"></a>最新版本的方案</h3><h4 id="显示的声明启用Ribbon"><a href="#显示的声明启用Ribbon" class="headerlink" title="显示的声明启用Ribbon"></a>显示的声明启用Ribbon</h4><p>在消费端的配置文件中设置：</p><pre class=" language-yml"><code class="language-yml">ribbon:  eureka:    enabled: true</code></pre><p>此项设置会自动基于Eureka做负载均衡。</p><h4 id="手动配置Ribbon"><a href="#手动配置Ribbon" class="headerlink" title="手动配置Ribbon"></a>手动配置Ribbon</h4><p>如果项目中并没有使用Eureka，可以手动进行配置文件配置或者编写代码进行配置。</p><p>配置文件配置如下：</p><pre class=" language-yml"><code class="language-yml"># 生产者服务名micro-service-producer:  ribbon:    # 服务地址    listOfServers: localhost:8200,localhost:8201</code></pre><p>代码配置如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"micro-service-producer"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> RibbonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String listOfServers <span class="token operator">=</span> <span class="token string">"localhost:8200,localhost:8201"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServerList<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token function">ribbonServerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Server<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Strings<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>listOfServers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String s<span class="token operator">:</span> listOfServers<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StaticServerList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的问题可能并不是导致这个报错的唯一原因，但应该是最有可能的原因。结合版本、使用的技术再确定解决方案，不可盲目相信网上的答案。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> ribbon </tag>
            
            <tag> feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JPA映射数据到非Entity对象的几种方式</title>
      <link href="/2019/08/19/jpa-ying-she-shu-ju-dao-fei-entity-dui-xiang-de-ji-chong-fang-shi/"/>
      <url>/2019/08/19/jpa-ying-she-shu-ju-dao-fei-entity-dui-xiang-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1 说明"></a>1 说明</h2><p>本文基于SpringBoot 2.1.7.RELEASE（spring-data-jpa版本：2.1.10.RELEASE）撰写，低版本jpa中的方法可能与最新版中的方法差异较大，但总体思路没有太大变化。文中观点皆为个人观点，如有错误或者更好的思路，欢迎指正。</p><h2 id="2-为什么需要把数据映射到非Entity对象"><a href="#2-为什么需要把数据映射到非Entity对象" class="headerlink" title="2 为什么需要把数据映射到非Entity对象"></a>2 为什么需要把数据映射到非Entity对象</h2><p>我们知道在使用jpa查询数据时，大多数情况下都有一个被@Entity注解标识的类用来与数据库表做映射，使用时先查询出这个对象再做一系列转换传递到前端。在此种情况下，如果查询方法的返回结果或者参数不是一个被@Entity注解所标识的对象，那么即便是字段映射上了，jpa仍然会给出一个IllegalArgumentException: Not a managed type异常。但是有些场景下（比如查询count(id)亦或者需要将多表的字段进行组合）我们并不方便直接做一个实体类来接收，甚至根本也找不到能映射的字段，这个时候就应该考虑其他的办法了。</p><h2 id="3-数据准备"><a href="#3-数据准备" class="headerlink" title="3 数据准备"></a>3 数据准备</h2><p>数据库student表与score表，并假设其中已经存在了部分数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>  <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span> <span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span> <span class="token punctuation">,</span>    sex <span class="token keyword">INT</span>    <span class="token keyword">COMMENT</span> <span class="token string">'性别，0：女；1：男'</span> <span class="token punctuation">,</span>    age <span class="token keyword">INT</span>    <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> score<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>  <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span> <span class="token punctuation">,</span>    student_id <span class="token keyword">INT</span>    <span class="token keyword">COMMENT</span> <span class="token string">'学生ID'</span> <span class="token punctuation">,</span>    subject_id <span class="token keyword">INT</span>    <span class="token keyword">COMMENT</span> <span class="token string">'科目 科目。0：语文；1：数学；2：英语'</span> <span class="token punctuation">,</span>    score <span class="token keyword">INT</span>    <span class="token keyword">COMMENT</span> <span class="token string">'分数'</span> <span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span></code></pre><h2 id="4-简单的聚合函数查询"><a href="#4-简单的聚合函数查询" class="headerlink" title="4 简单的聚合函数查询"></a>4 简单的聚合函数查询</h2><p>比如当只想查询所有性别为男的同学的数量时，有以下几种实现方案。当然，这里只是列举了我暂时能想到的具有明显差异的方式，至于偏向于sql还是hql，返回对象还是Map，可以由读者自行发散。</p><h3 id="4-1-使用countBy方法作为查询"><a href="#4-1-使用countBy方法作为查询" class="headerlink" title="4.1 使用countBy方法作为查询"></a>4.1 使用countBy方法作为查询</h3><p>以下便是全部的代码，再简单不过了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepo</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token function">countBySex</span><span class="token punctuation">(</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-使用-Query注解查询"><a href="#4-2-使用-Query注解查询" class="headerlink" title="4.2 使用@Query注解查询"></a>4.2 使用@Query注解查询</h3><p>同样并不复杂，只是我个人并不推荐在已经使用了jpa的情况下继续使用sql或hql。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(id) FROM Student WHERE sex = :sex"</span><span class="token punctuation">)</span><span class="token keyword">long</span> <span class="token function">queryCountBySex</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-3-使用EntityManager构造SQL或HQL查询"><a href="#4-3-使用EntityManager构造SQL或HQL查询" class="headerlink" title="4.3 使用EntityManager构造SQL或HQL查询"></a>4.3 使用EntityManager构造SQL或HQL查询</h3><p>这种方式明显比前面几种麻烦了许多，但是好处是对于动态的查询条件有了更好的支持。</p><pre class=" language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"SELECT COUNT(id) FROM student WHERE sex = ? "</span><span class="token punctuation">;</span>Query countQuery <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createNativeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>countQuery<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生数量："</span> <span class="token operator">+</span> countQuery<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-4-构建CriteriaQuery查询"><a href="#4-4-构建CriteriaQuery查询" class="headerlink" title="4.4 构建CriteriaQuery查询"></a>4.4 构建CriteriaQuery查询</h3><p>本质上，我们可以自己构建一个查询而不必去写sql，这样做的好处是，我们“完美”的践行了OOP的思想。</p><pre class=" language-java"><code class="language-java">CriteriaBuilder cb <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CriteriaQuery<span class="token operator">&lt;</span>Long<span class="token operator">></span> query <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Root<span class="token operator">&lt;</span>Student<span class="token operator">></span> root <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生数量："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-5-使用Specification构造查询条件查询"><a href="#4-5-使用Specification构造查询条件查询" class="headerlink" title="4.5 使用Specification构造查询条件查询"></a>4.5 使用Specification构造查询条件查询</h3><p>本质上，这应该跟3.4的方法一样，但是使用Specification的好处是，我们可以将Specification作为参数传递给方法。只需要在Repository里定义一个<code>long count(Specification&lt;Student&gt; specification);</code>方法，jpa会自动帮我们查询。看上去，这应该是最复杂的方式了。的确，在这个条件下，使用这种方式确实有点“得不偿失”的感觉，但如果事情变得更加复杂，我个人是最推崇这种方式的。</p><pre class=" language-java"><code class="language-java">Specification<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentSpecification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Predicate <span class="token function">toPredicate</span><span class="token punctuation">(</span>Root<span class="token operator">&lt;</span>Student<span class="token operator">></span> root<span class="token punctuation">,</span> CriteriaQuery<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> criteriaQuery<span class="token punctuation">,</span>        CriteriaBuilder criteriaBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        criteriaQuery<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>criteriaBuilder<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>criteriaBuilder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> studentRepo<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>studentSpecification<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生数量："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-复杂情况下的查询"><a href="#5-复杂情况下的查询" class="headerlink" title="5 复杂情况下的查询"></a>5 复杂情况下的查询</h2><p>现在来看一些稍微复杂点的情况。比如现在需要统计每个学生的所有科目的成绩总和，如果写sql的话，应该看上去像是这样：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> st<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student st <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> score s <span class="token keyword">ON</span> s<span class="token punctuation">.</span>student_id <span class="token operator">=</span> st<span class="token punctuation">.</span>id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s<span class="token punctuation">.</span>student_id</code></pre><p>这里举这个例子，只是为了方便说明做的一个简单举例，有时候我们确实需要做这样的统计：它们既不方便做成单独的实体，也不方便做多次查询来处理。在这个条件下，还能使用之前的那些方式么？事实上，除了3.1跟3.5中的方式（据我自己了解），其他都是可以实现的。</p><p>在这种条件下，应该有一个类用于接收查询结果（非@Entity注解的类）：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentScore</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long totalScore<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接下来看看上面的方法都来如何改进。</p><h3 id="5-1-使用-Query注解查询改进"><a href="#5-1-使用-Query注解查询改进" class="headerlink" title="5.1 使用@Query注解查询改进"></a>5.1 使用@Query注解查询改进</h3><p>从代码中可以看出，@Query能够使用构造方法对参数进行注入。这是其实现的方式之一。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT new com.jptangchina.jpa.StudentScore(st.name, SUM(s.score)) FROM Student st LEFT JOIN Score s ON s.studentId = st.id GROUP BY s.studentId"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>StudentScore<span class="token operator">></span> <span class="token function">queryStudentScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>虽然此方式能够实现目标功能，但是对于一些复杂场景的动态SQL支持欠佳，况且我个人实在不愿看到代码里面既有sql又有方法，所以并不推荐。</p><h3 id="5-2-使用EntityManager构造SQL或HQL查询方法改进"><a href="#5-2-使用EntityManager构造SQL或HQL查询方法改进" class="headerlink" title="5.2 使用EntityManager构造SQL或HQL查询方法改进"></a>5.2 使用EntityManager构造SQL或HQL查询方法改进</h3><p>一种可能的写法是：</p><pre class=" language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"SELECT st.`name`, SUM(s.score) FROM student st LEFT JOIN score s ON s.student_id = st.id GROUP BY s.student_id"</span><span class="token punctuation">;</span>NativeQuery query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createNativeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>NativeQuery<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>StudentScore<span class="token operator">></span> studentScores <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不说了，纯sql，撸就完事儿了。</p><h3 id="5-3-构建CriteriaQuery查询方法改进"><a href="#5-3-构建CriteriaQuery查询方法改进" class="headerlink" title="5.3 构建CriteriaQuery查询方法改进"></a>5.3 构建CriteriaQuery查询方法改进</h3><p>由于这里用到了多表连接查询，因此需要在Student中指名与Score的映射关系：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> FetchType<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span><span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"studentId"</span><span class="token punctuation">,</span> insertable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Score<span class="token operator">></span> scores<span class="token punctuation">;</span></code></pre><p>然后代码可以这样改进：</p><pre class=" language-java"><code class="language-java">CriteriaBuilder cb <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CriteriaQuery<span class="token operator">&lt;</span>StudentScore<span class="token operator">></span> query <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>StudentScore<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Root<span class="token operator">&lt;</span>Student<span class="token operator">></span> root <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Join<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> Score<span class="token operator">></span> scoreJoin <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span><span class="token string">"scores"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>scoreJoin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>scoreJoin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"studentId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>StudentScore<span class="token operator">></span> studentScores <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>至于为什么3.5中的方法不能实现，我看了下jpa的源码，其中有这么一段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> TypedQuery<span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Specification<span class="token operator">&lt;</span>S<span class="token operator">></span> spec<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>S<span class="token operator">></span> domainClass<span class="token punctuation">,</span> Sort sort<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CriteriaBuilder builder <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>em<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CriteriaQuery<span class="token operator">&lt;</span>S<span class="token operator">></span> query <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>domainClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Root<span class="token operator">&lt;</span>S<span class="token operator">></span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applySpecificationToCriteria</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> domainClass<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>        query<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">isSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            query<span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>QueryUtils<span class="token punctuation">.</span><span class="token function">toOrders</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> root<span class="token punctuation">,</span> builder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyRepositoryMethodMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>em<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，jpa自动构建的查询中，CriteriaQuery与Root的泛型类型是一致的，而通过3.4中的代码对比来看的话，CriteriaQuery的泛型类型应该与最终返回的对象一致才对，所以如果没有其他方案的话，这个方法应该是行不通的。而实际情况中，jpa会抛出一个PropertyReferenceException异常。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>以上皆为个人在平时开发中遇到过的一些问题，但是这里做了简化处理。总体来讲，既然使用了jpa，我认为就尽可能的避免以sql的形式再去处理数据库操作。</p><p>jpa中数据当然也可以返回为<code>List&lt;Object[]&gt;</code>、<code>List&lt;Map&lt;String, Object&gt;&gt;</code>的形式，但同样的，个人认为这已经违背了OOP的思想，是一种妥协，不应积极采用的，多使用Specification才是正道哇。</p><p>再次声明，个人观点，有错误欢迎提出。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jpa </tag>
            
            <tag> 数据映射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle环境下导出Swagger为PDF</title>
      <link href="/2019/06/25/gradle-huan-jing-xia-dao-chu-swagger-wei-pdf/"/>
      <url>/2019/06/25/gradle-huan-jing-xia-dao-chu-swagger-wei-pdf/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我个人是一直使用Swagger作为接口文档的说明的。但是由于在一些情况下，接口文档说明需要以文件的形式交付出去，如果再重新写一份文档难免有些麻烦。于是在网上看到了Swagger2Markup + asciidoctor导出PDF的方法，百度一番后感觉网上的文章还是有很多没有描述清楚的地方，遂还是硬着头皮把官方的英文文档大致浏览了一下，按照自己的思路整理出具体的步骤。</p><p>本文用到的工具：</p><ul><li>Gradle - 4.10.3</li><li>SpringBoot - 2.1.6.RELEASE</li><li>Swagger - 2.9.2</li><li>Swagger2Markup - 1.3.3</li><li>asciidoctor</li><li>spring-restdocs-mockmvc</li></ul><h2 id="准备Swagger数据"><a href="#准备Swagger数据" class="headerlink" title="准备Swagger数据"></a>准备Swagger数据</h2><p>SpringBoot中使用Swagger的过程就不再赘述了，下面是本文使用的范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.jptangchina.gradle.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Swagger2Markup Test Api"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户接口"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户登录"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"jptangchina"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> String username<span class="token punctuation">,</span>        <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"jptangchina"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用org-asciidoctor-convert生成PDF（个人不推荐使用）"><a href="#使用org-asciidoctor-convert生成PDF（个人不推荐使用）" class="headerlink" title="使用org.asciidoctor.convert生成PDF（个人不推荐使用）"></a>使用org.asciidoctor.convert生成PDF（个人不推荐使用）</h2><blockquote><p>官方教程地址：<a href="https://github.com/Swagger2Markup/spring-swagger2markup-demo" target="_blank" rel="noopener">https://github.com/Swagger2Markup/spring-swagger2markup-demo</a></p></blockquote><p>仅为了简单的导出PDF而言，本文针对官方案例均有所改动，去掉了部分没有用到的配置。</p><h3 id="1-获取Swagger-json文件"><a href="#1-获取Swagger-json文件" class="headerlink" title="1. 获取Swagger json文件"></a>1. 获取Swagger json文件</h3><p>Swagger页面本质上也就是对json文件进行解析。这里需要先编写单元测试访问<code>/v2/api-docs</code>接口并将json文件保存到本地。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">class</span> <span class="token class-name">SwaggerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generateAsciiDocsToFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String outputDir <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"io.springfox.staticdocs.outputDir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MvcResult mvcResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/v2/api-docs"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MockHttpServletResponse response <span class="token operator">=</span> mvcResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String swaggerJson <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Files<span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>BufferedWriter writer <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">newBufferedWriter</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">,</span> <span class="token string">"swagger.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>swaggerJson<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>System.getProperty(“io.springfox.staticdocs.outputDir”);来自于build.gradle中的配置</p></blockquote><h3 id="2-将json文件转换为adoc文件"><a href="#2-将json文件转换为adoc文件" class="headerlink" title="2. 将json文件转换为adoc文件"></a>2. 将json文件转换为adoc文件</h3><p>转换json文件需要使用到<code>io.github.swagger2markup</code>插件的<code>convertSwagger2markup</code>方法。</p><p>引入相关依赖：</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    dependencies <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        classpath <span class="token string">'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.github.swagger2markup'</span></code></pre><p>配置convertSwagger2markup：</p><pre class=" language-java"><code class="language-java">ext <span class="token punctuation">{</span>    asciiDocOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/asciidoc"</span><span class="token punctuation">)</span>    swaggerOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/swagger"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    systemProperty <span class="token string">'io.springfox.staticdocs.outputDir'</span><span class="token punctuation">,</span> swaggerOutputDir<span class="token punctuation">}</span>convertSwagger2markup <span class="token punctuation">{</span>    dependsOn test    swaggerInput <span class="token string">"${swaggerOutputDir}/swagger.json"</span>    outputDir asciiDocOutputDir    config <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'swagger2markup.pathsGroupedBy'</span> <span class="token operator">:</span> <span class="token string">'TAGS'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>更多config配置可以参考：<a href="http://swagger2markup.github.io/swagger2markup/1.3.3/#_swagger2markup_properties" target="_blank" rel="noopener">http://swagger2markup.github.io/swagger2markup/1.3.3/#_swagger2markup_properties</a></p></blockquote><h3 id="3-将adoc文件转换为PDF文件"><a href="#3-将adoc文件转换为PDF文件" class="headerlink" title="3. 将adoc文件转换为PDF文件"></a>3. 将adoc文件转换为PDF文件</h3><p>转换PDF文件需要用到<code>org.asciidoctor.convert</code>插件的<code>asciidoctor</code>方法。<br>引入相关依赖：</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    dependencies <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        classpath <span class="token string">'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.asciidoctor.convert'</span></code></pre><p><strong>手动编写</strong>index.adoc文件，放置到${asciiDocOutputDir.absolutePath}中：</p><pre><code>include::{generated}/overview.adoc[]include::{generated}/paths.adoc[]include::{generated}/definitions.adoc[]include::{generated}/security.adoc[]</code></pre><blockquote><p>{generated}默认值为${build}/asciidoc，参见：<a href="https://github.com/Swagger2Markup/swagger2markup-gradle-project-template" target="_blank" rel="noopener">https://github.com/Swagger2Markup/swagger2markup-gradle-project-template</a></p></blockquote><p>配置asciidoctor：</p><pre class=" language-java"><code class="language-java">asciidoctor <span class="token punctuation">{</span>    dependsOn convertSwagger2markup    <span class="token comment" spellcheck="true">// sourceDir中需要包含有之前手动编写的index.adoc文件</span>    <span class="token function">sourceDir</span><span class="token punctuation">(</span>asciiDocOutputDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    sources <span class="token punctuation">{</span>        include <span class="token string">"index.adoc"</span>    <span class="token punctuation">}</span>    backends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pdf'</span><span class="token punctuation">]</span>    attributes <span class="token operator">=</span> <span class="token punctuation">[</span>            doctype<span class="token operator">:</span> <span class="token string">'book'</span><span class="token punctuation">,</span>            toc<span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>            toclevels<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>            numbered<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            sectlinks<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            sectanchors<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            hardbreaks<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            generated<span class="token operator">:</span> asciiDocOutputDir    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="4-编写一个自定义task用来执行上述流程："><a href="#4-编写一个自定义task用来执行上述流程：" class="headerlink" title="4. 编写一个自定义task用来执行上述流程："></a>4. 编写一个自定义task用来执行上述流程：</h3><pre class=" language-java"><code class="language-java">task <span class="token function">genPdf</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Test<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>    include <span class="token string">'**/*SwaggerTest.class'</span>    exclude <span class="token string">'**/*'</span>    <span class="token function">dependsOn</span><span class="token punctuation">(</span>asciidoctor<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>执行genPdf，就可以生成Swagger对应的PDF文件。</p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h3><p>使用此方法步骤还是比较繁琐的，总体来讲就是json -&gt; adoc -&gt; pdf，并且使用此种方法目前有几个比较大的问题我仍然没有找到解决方案：</p><ul><li>从官方文档中可以看到支持的语言默认有EN, DE, FR, RU。没错，不支持CN，从导出的文档也可以看到，部分中文无法显示，目前我也尚未找到是否有配置可以实现这个功能。网上的文章部分是通过替换源代码包里面的字体文件来实现，但是由于后面有更好的解决方案，这里就不再讨论。</li><li>从asciidoctorj-pdf的<code>1.5.0-alpha.16</code>版本以后（目前最新是1.5.0-alpha.18），这种方式生成文件会抛出异常，我个人并没有深究这个异常，有兴趣的读者可以通过修改版本号试一试。</li><li>生成的adoc文件一般包含overview.adoc、paths.adoc、definitions.adoc、security.adoc一共4个文件，这也是为什么要手动编写index.adoc进行整合的原因，感觉不太方便。<br>综上，我个人并不推荐采用此方式生成PDF。</li></ul><p>build.gradle完整文件参考：</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    ext <span class="token punctuation">{</span>        springbootVersion <span class="token operator">=</span> <span class="token string">'2.1.6.RELEASE'</span>    <span class="token punctuation">}</span>    repositories <span class="token punctuation">{</span>        maven <span class="token punctuation">{</span>            url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">"org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"</span>        classpath <span class="token string">'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'</span>        classpath <span class="token string">'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'java'</span>apply plugin<span class="token operator">:</span> <span class="token string">'maven'</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.springframework.boot'</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.spring.dependency-management'</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.github.swagger2markup'</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.asciidoctor.convert'</span>group <span class="token string">'com.jptangchina'</span>version <span class="token string">'1.0-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>targetCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>ext <span class="token punctuation">{</span>    asciiDocOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/asciidoc"</span><span class="token punctuation">)</span>    swaggerOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/swagger"</span><span class="token punctuation">)</span>    swaggerVersion <span class="token operator">=</span> <span class="token string">'2.9.2'</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compile <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compile <span class="token string">"io.springfox:springfox-swagger2:${swaggerVersion}"</span>    compile <span class="token string">"io.springfox:springfox-swagger-ui:${swaggerVersion}"</span>    compile <span class="token string">'io.github.swagger2markup:swagger2markup:1.3.3'</span>    asciidoctor <span class="token string">'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16'</span>    testCompile <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span>    testCompile <span class="token string">'org.springframework.restdocs:spring-restdocs-mockmvc'</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    systemProperty <span class="token string">'io.springfox.staticdocs.outputDir'</span><span class="token punctuation">,</span> swaggerOutputDir<span class="token punctuation">}</span>convertSwagger2markup <span class="token punctuation">{</span>    dependsOn test    swaggerInput <span class="token string">"${swaggerOutputDir}/swagger.json"</span>    outputDir asciiDocOutputDir    config <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'swagger2markup.pathsGroupedBy'</span> <span class="token operator">:</span> <span class="token string">'TAGS'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>asciidoctor <span class="token punctuation">{</span>    dependsOn convertSwagger2markup    <span class="token function">sourceDir</span><span class="token punctuation">(</span>asciiDocOutputDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    sources <span class="token punctuation">{</span>        include <span class="token string">"index.adoc"</span>    <span class="token punctuation">}</span>    backends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pdf'</span><span class="token punctuation">]</span>    attributes <span class="token operator">=</span> <span class="token punctuation">[</span>            doctype<span class="token operator">:</span> <span class="token string">'book'</span><span class="token punctuation">,</span>            toc<span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>            toclevels<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>            numbered<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            sectlinks<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            sectanchors<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            hardbreaks<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            generated<span class="token operator">:</span> asciiDocOutputDir    <span class="token punctuation">]</span><span class="token punctuation">}</span>task <span class="token function">genPdf</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Test<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>    include <span class="token string">'**/*SwaggerTest.class'</span>    exclude <span class="token string">'**/*'</span>    <span class="token function">dependsOn</span><span class="token punctuation">(</span>asciidoctor<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="使用asciidoctor-gradle-plugin生成PDF（推荐）"><a href="#使用asciidoctor-gradle-plugin生成PDF（推荐）" class="headerlink" title="使用asciidoctor-gradle-plugin生成PDF（推荐）"></a>使用asciidoctor-gradle-plugin生成PDF（推荐）</h2><p>asciidoctor-gradle-plugin也是官方推荐的使用方式。相对前面的方式，使用起来更加简单，也可以修改配置输出中文。</p><h3 id="1-引入插件"><a href="#1-引入插件" class="headerlink" title="1. 引入插件"></a>1. 引入插件</h3><pre class=" language-java"><code class="language-java">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.asciidoctor.jvm.pdf'</span> version <span class="token string">'2.2.0'</span><span class="token punctuation">}</span></code></pre><h3 id="2-编写测试类生成adoc"><a href="#2-编写测试类生成adoc" class="headerlink" title="2. 编写测试类生成adoc"></a>2. 编写测试类生成adoc</h3><p>与第一中方法不同的是，不需要再将json文件保存到本地了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generateAsciiDocsToFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String outputDir <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"io.springfox.staticdocs.outputDir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MvcResult mvcResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/v2/api-docs"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Swagger2MarkupConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swagger2MarkupConfigBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withMarkupLanguage</span><span class="token punctuation">(</span>MarkupLanguage<span class="token punctuation">.</span>ASCIIDOC<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withOutputLanguage</span><span class="token punctuation">(</span>Language<span class="token punctuation">.</span>ZH<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withPathsGroupedBy</span><span class="token punctuation">(</span>GroupBy<span class="token punctuation">.</span>TAGS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withGeneratedExamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withoutInlineSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MockHttpServletResponse response <span class="token operator">=</span> mvcResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String swaggerJson <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Swagger2MarkupConverter<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>swaggerJson<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>outputDir <span class="token operator">+</span> <span class="token string">"/swagger"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>有兴趣的读者可以阅读下toFile方法的源码，里面对第一种方法生成的4个文件进行了整合，这也是不再需要手动编写index.adoc文件的原因。</p></blockquote><h3 id="3-配置asciidoctorPdf"><a href="#3-配置asciidoctorPdf" class="headerlink" title="3. 配置asciidoctorPdf"></a>3. 配置asciidoctorPdf</h3><pre class=" language-java"><code class="language-java">ext <span class="token punctuation">{</span>    asciiDocOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/asciidoc"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建字体与主题的文件夹</span>    pdfFontsDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/fonts"</span><span class="token punctuation">)</span>    pdfThemesDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/themes"</span><span class="token punctuation">)</span>    swaggerVersion <span class="token operator">=</span> <span class="token string">'2.9.2'</span><span class="token punctuation">}</span>pdfThemes <span class="token punctuation">{</span>    local <span class="token string">'basic'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        styleDir <span class="token operator">=</span> pdfThemesDir        <span class="token comment" spellcheck="true">// styleName会被程序用于匹配${styleName}-theme.yml，如default-styleName-theme.yml</span>        styleName <span class="token operator">=</span> <span class="token string">'default'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>asciidoctorPdf<span class="token punctuation">{</span>    <span class="token function">sourceDir</span><span class="token punctuation">(</span>asciiDocOutputDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    sources <span class="token punctuation">{</span>        include <span class="token string">"swagger.adoc"</span>    <span class="token punctuation">}</span>    <span class="token function">fontsDir</span><span class="token punctuation">(</span>pdfFontsDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">"basic"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>本文字体与主题文件均来自于<code>asciidoctorj-pdf-1.5.0-alpha.18.jar</code>源码包，其路径位于：gems/asciidoctorj-pdf-1.5.0-alpha.18/data</p></blockquote><h3 id="4-复制并修改default-theme-yml文件配置"><a href="#4-复制并修改default-theme-yml文件配置" class="headerlink" title="4. 复制并修改default-theme.yml文件配置"></a>4. 复制并修改default-theme.yml文件配置</h3><p>为了解决中文无法显示的问题，首先需要自行下载一个支持中文的字体文件。</p><p>修改主题文件，将mplus1p-regular-fallback.ttf替换为自己下载的字体文件的名称。</p><pre class=" language-yml"><code class="language-yml">M+ 1p Fallback:  normal: your-font.ttf  bold: your-font.ttf  italic: your-font.ttf  bold_italic: your-font.ttf</code></pre><blockquote><p>由于手动指定了字体文件的路径，所以除了中文以外，还<strong>需要将源码中的其他字体文件一并复制到${pdfFontsDir}文件夹</strong>。如果不愿意使用官方的字体，也可以考虑将default-theme.yml中其他的字体文件都修改为自己想要的文件。</p></blockquote><p>保持task genPdf不变，再次运行即可生成PDF文件，生成的文件默认路径为${build}/docs/asciidocPdf</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>asciidoctor-gradle-plugin的方式可以支持配置字体与主题，通过配置不仅规避了中文无法显示的问题，同时使用起来也更加简单。需要注意的是，采用此种方案生成出的文档会在封面写有项目的版本号，此版本号为build.gradle中的version，而非SwaggerConfig类中的version。</p><p>官方提供了很多配置，可以自行参考官方文档查看。</p><p>build.gradle完整文件参考：</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    ext <span class="token punctuation">{</span>        springbootVersion <span class="token operator">=</span> <span class="token string">'2.1.6.RELEASE'</span>    <span class="token punctuation">}</span>    repositories <span class="token punctuation">{</span>        maven <span class="token punctuation">{</span>            url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">"org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>plugins <span class="token punctuation">{</span>    id <span class="token string">'org.asciidoctor.jvm.pdf'</span> version <span class="token string">'2.2.0'</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'java'</span>apply plugin<span class="token operator">:</span> <span class="token string">'maven'</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.springframework.boot'</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.spring.dependency-management'</span>group <span class="token string">'com.jptangchina'</span>version <span class="token string">'1.0-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>targetCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>ext <span class="token punctuation">{</span>    asciiDocOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/asciidoc"</span><span class="token punctuation">)</span>    pdfFontsDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/fonts"</span><span class="token punctuation">)</span>    pdfThemesDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/themes"</span><span class="token punctuation">)</span>    swaggerVersion <span class="token operator">=</span> <span class="token string">'2.9.2'</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compile <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compile <span class="token string">"io.springfox:springfox-swagger2:${swaggerVersion}"</span>    compile <span class="token string">"io.springfox:springfox-swagger-ui:${swaggerVersion}"</span>    compile <span class="token string">'io.github.swagger2markup:swagger2markup:1.3.3'</span>    testCompile <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span>    testCompile <span class="token string">'org.springframework.restdocs:spring-restdocs-mockmvc'</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    systemProperty <span class="token string">'io.springfox.staticdocs.outputDir'</span><span class="token punctuation">,</span> asciiDocOutputDir<span class="token punctuation">}</span>pdfThemes <span class="token punctuation">{</span>    local <span class="token string">'basic'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        styleDir <span class="token operator">=</span> pdfThemesDir        styleName <span class="token operator">=</span> <span class="token string">'default'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>asciidoctorPdf<span class="token punctuation">{</span>    <span class="token function">sourceDir</span><span class="token punctuation">(</span>asciiDocOutputDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    sources <span class="token punctuation">{</span>        include <span class="token string">"swagger.adoc"</span>    <span class="token punctuation">}</span>    <span class="token function">fontsDir</span><span class="token punctuation">(</span>pdfFontsDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">"basic"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>task <span class="token function">genPdf</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Test<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>    include <span class="token string">'**/*SwaggerTest.class'</span>    exclude <span class="token string">'**/*'</span>    <span class="token function">dependsOn</span><span class="token punctuation">(</span>asciidoctorPdf<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Swagger2Markup/swagger2markup" target="_blank" rel="noopener">https://github.com/Swagger2Markup/swagger2markup</a><br><a href="https://github.com/Swagger2Markup/spring-swagger2markup-demo" target="_blank" rel="noopener">https://github.com/Swagger2Markup/spring-swagger2markup-demo</a><br><a href="http://swagger2markup.github.io/swagger2markup/1.3.3" target="_blank" rel="noopener">http://swagger2markup.github.io/swagger2markup/1.3.3</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> swagger </tag>
            
            <tag> swagger2markup </tag>
            
            <tag> asciidoctor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jxcel - 好用的Excel与Java对象转换工具</title>
      <link href="/2019/06/13/jxcel-hao-yong-de-excel-yu-java-dui-xiang-zhuan-huan-gong-ju/"/>
      <url>/2019/06/13/jxcel-hao-yong-de-excel-yu-java-dui-xiang-zhuan-huan-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="Jxcel简介"><a href="#Jxcel简介" class="headerlink" title="Jxcel简介"></a>Jxcel简介</h2><p>Jxcel是一个支持Java对象与Excel（目前仅xlsx、xls）互相转换的工具包。</p><p>项目地址：<a href="https://github.com/jptangchina/jxcel" target="_blank" rel="noopener">https://github.com/jptangchina/jxcel</a></p><h2 id="特性说明"><a href="#特性说明" class="headerlink" title="特性说明"></a>特性说明</h2><ul><li>Java对象输出为Excel文件或Workbook对象</li><li>语义化转换，将数字类型或布尔类型的值与语义化的值互相转换</li><li>生成的Excel文件可以对列进行排序</li><li>表头与Java属性精确匹配</li><li>支持几乎所有基本数据类型以及日期类型的转换</li><li>日期格式自定义</li><li>表格宽度自适应</li><li>……更多特性</li></ul><h2 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h2><p>以Maven为例，引入Jxcel依赖包：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jptangchina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jxcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jxcel.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="准备数据模型"><a href="#准备数据模型" class="headerlink" title="准备数据模型"></a>准备数据模型</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@JxcelSheet</span><span class="token punctuation">(</span><span class="token string">"学生名单"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"性别"</span><span class="token punctuation">,</span> parse <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"出生日期"</span><span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date birthDay<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"手机号"</span><span class="token punctuation">,</span> suffix <span class="token operator">=</span> <span class="token string">"\t"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String mobile<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="导出数据到Excel"><a href="#导出数据到Excel" class="headerlink" title="导出数据到Excel"></a>导出数据到Excel</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 导出为XLS Workbook对象</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateWorkbook</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出为XLSX Workbook对象</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsxGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateWorkbook</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出为XLS文件</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateFile</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出为XLSX文件</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsxGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateFile</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="将Excel解析为Java对象"><a href="#将Excel解析为Java对象" class="headerlink" title="将Excel解析为Java对象"></a>将Excel解析为Java对象</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从文件解析</span>JxcelParser<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseFromFile</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从Workbood对象解析</span>JxcelParser<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseFromWorkbook</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> workbook<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class=" language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"JptangChina"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"18510010000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsxGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateFile</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/home/jptangchina/test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出的表格如下：</p><p><img src="https://s2.ax1x.com/2019/06/14/V4Zy8J.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jxcel </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SpringBoot JPA进行自定义的保存及批量保存</title>
      <link href="/2019/06/03/shi-yong-springboot-jpa-jin-xing-zi-ding-yi-de-bao-cun-ji-pi-liang-bao-cun/"/>
      <url>/2019/06/03/shi-yong-springboot-jpa-jin-xing-zi-ding-yi-de-bao-cun-ji-pi-liang-bao-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>SpringBoot版本：2.1.4.RELEASE</p><p>java版本：1.8</p><p>文中所说JPA皆指spring-boot-starter-data-jpa</p><h2 id="使用JPA保存一个Student对象"><a href="#使用JPA保存一个Student对象" class="headerlink" title="使用JPA保存一个Student对象"></a>使用JPA保存一个Student对象</h2><p>在JPA中保存一个对象，仅需要该对象，一个仓储即可。<br>StudentDO实体类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_student"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> String seq<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>JPA仓储：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepo</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>StudentDO<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>一般的，我们只需要调用StudentRepo.save()方法即可完成对实体对象的保存操作。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentDO student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setSeq</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        studentRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="在插入过程中使用mysql函数"><a href="#在插入过程中使用mysql函数" class="headerlink" title="在插入过程中使用mysql函数"></a>在插入过程中使用mysql函数</h2><p>如果我们希望student的seq值由系统自动生成，且生成规则为“yyMMdd + 8位自增序列”（例如19060310000000）又该如何实现呢？</p><p>首先想到的是该如何生成这一串序列，mysql不像oracle自身支持sequence，因此在这里可以借用函数以及额外的sequence表来实现这一操作，网上有很多实现方式，这里就不再赘述。</p><p>现在已经有了函数getseq(‘student_seq’)可以获取到该序列，该如何将其应用到保存对象的方法中？显然的一个问题是，像上面那样再直接调用save方法已经行不通了，应该得需要自定义插入的sql实现。</p><p>一个容易想到的办法是，在StudentDO类上使用注解@SQLInsert来定义insert的实现，它写起来应该会像这个样子：</p><pre><code>@SQLInsert(sql = &quot;INSERT INTO t_student(seq, name, sex) VALUES (getseq(&#39;student_seq&#39;), ?, ?&quot;)</code></pre><p>这条sql语句本身并没有什么问题，再次调用save()方法也确实能够执行。但是很可惜，它确会抛出一个sql异常：</p><pre><code>java.sql.SQLException: Parameter index out of range (3 &gt; number of parameters, which is 2).</code></pre><p>显然是程序认为有多少个参数，就得有多少个“?”与之匹配，目前我并没有找到解决这个问题的方案，所以这种方法宣告失败。</p><p>既然@SQLInsert行不通，或许可以考虑使用@Query注解来自定义一个实现。我们可以在StudentRepo中定义这样一个方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"INSERT INTO t_student(seq, name, sex) VALUES (getseq('student_seq'), :#{#student.name}, :#{#student.sex})"</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span> StudentDO student<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>试着运行一下，结果很成功，对象被正常的存储到数据库中，并且seq的取值也正常。看上去我们的问题已经得到了解决，但事实真的如此么？</p><h2 id="自定义的批量存储"><a href="#自定义的批量存储" class="headerlink" title="自定义的批量存储"></a>自定义的批量存储</h2><p>上面的例子中，我们成功通过JPA调用了mysql函数将对象存储到数据库中。但上面的例子只提供了单个保存的方法，如果我们想批量保存呢？@Query里面的sql能够进行改造么？我并没有找到@Query中使用List<object>作为参数的insert方法，但是这并不代表这一操作不能执行。JPA仍旧提供给了使用者原始的使用方式：利用EntityManager来构造sql并执行。</object></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@PersistenceContext</span>    <span class="token keyword">private</span> EntityManager entityManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">batchInsert</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>StudentDO<span class="token operator">></span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_student(seq, name, sex) VALUES "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>StudentDO student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"(getseq('student_seq'), ?, ?),"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String sql <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createNativeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paramIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>StudentDO student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>            query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>paramIndex<span class="token operator">++</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>paramIndex<span class="token operator">++</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>就像MyBatis一样，使用者也可以自定义SQL来执行，试试看，同样没有问题，再多的数据也可以被保存到数据库中！批量保存的效果达到了。</p><p>再仔细想一想，通过上面的过程，还有什么问题么？对比JPA自带的save()方法，似乎我们的自定义保存返回的都是int结果，也就是操作影响的数据库行数。使用过JPA的人都应该了解，JPA的save()方法（或者其他JPA方法）返回的对象是经过持久化的，得益于这一特性，使用者可以在调用save()方法之后获取到对象的id等必须先插入到数据库之后才会有的值。显然这里的操作已经失去了这一特性，那如果我们把返回值对应的改为Object或者List<object>可以做到么？答案是并不能，我们会得到如下异常：</object></p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>InvalidDataAccessApiUsageException<span class="token operator">:</span> Modifying queries can only use <span class="token keyword">void</span> or <span class="token keyword">int</span><span class="token operator">/</span>Integer as <span class="token keyword">return</span> type<span class="token operator">!</span><span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token operator">:</span> Modifying queries can only use <span class="token keyword">void</span> or <span class="token keyword">int</span><span class="token operator">/</span>Integer as <span class="token keyword">return</span> type<span class="token operator">!</span></code></pre><p>insert方法必须使用@Modifying进行注解，而@Modifying注解的方法又只能返回int类型的结果。这种情况下或许只能先利用查询得到seq的值再进行操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于JPA的使用还不够了解，一些复杂的情况下没有找到最理想的实现方案。</p><ol><li>@Query注解中是否能够使用List<object>以及实现动态拼接参数的效果没有得到解决</object></li><li>自定义的sql语句返回持久化对象的问题没有方案</li></ol><p>在以后的使用了解中希望能够找到解决办法，将问题记录在这里，以便后续查看。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/13/hello-world/"/>
      <url>/2019/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
