<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gradle环境下导出Swagger为PDF</title>
      <link href="/2019/06/25/gradle-huan-jing-xia-dao-chu-swagger-wei-pdf/"/>
      <url>/2019/06/25/gradle-huan-jing-xia-dao-chu-swagger-wei-pdf/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我个人是一直使用Swagger作为接口文档的说明的。但是由于在一些情况下，接口文档说明需要以文件的形式交付出去，如果再重新写一份文档难免有些麻烦。于是在网上看到了Swagger2Markup + asciidoctor导出PDF的方法，百度一番后感觉网上的文章还是有很多没有描述清楚的地方，遂还是硬着头皮把官方的英文文档大致浏览了一下，按照自己的思路整理出具体的步骤。</p><p>本文用到的工具：</p><ul><li>Gradle - 4.10.3</li><li>SpringBoot - 2.1.6.RELEASE</li><li>Swagger - 2.9.2</li><li>Swagger2Markup - 1.3.3</li><li>asciidoctor</li><li>spring-restdocs-mockmvc</li></ul><h2 id="准备Swagger数据"><a href="#准备Swagger数据" class="headerlink" title="准备Swagger数据"></a>准备Swagger数据</h2><p>SpringBoot中使用Swagger的过程就不再赘述了，下面试本文使用的范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.jptangchina.gradle.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Swagger2Markup Test Api"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户接口"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"用户登录"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"jptangchina"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> String username<span class="token punctuation">,</span>        <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"jptangchina"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用org-asciidoctor-convert生成PDF（个人不推荐使用）"><a href="#使用org-asciidoctor-convert生成PDF（个人不推荐使用）" class="headerlink" title="使用org.asciidoctor.convert生成PDF（个人不推荐使用）"></a>使用org.asciidoctor.convert生成PDF（个人不推荐使用）</h2><blockquote><p>官方教程地址：<a href="https://github.com/Swagger2Markup/spring-swagger2markup-demo" target="_blank" rel="noopener">https://github.com/Swagger2Markup/spring-swagger2markup-demo</a></p></blockquote><p>仅为了简单的导出PDF而言，本文针对官方案例均有所改动，去掉了部分没有用到的配置。</p><h3 id="1-获取Swagger-json文件"><a href="#1-获取Swagger-json文件" class="headerlink" title="1. 获取Swagger json文件"></a>1. 获取Swagger json文件</h3><p>Swagger页面本质上也就是对json文件进行解析。这里需要先编写单元测试访问<code>/v2/api-docs</code>接口并将json文件保存到本地。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">class</span> <span class="token class-name">SwaggerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generateAsciiDocsToFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String outputDir <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"io.springfox.staticdocs.outputDir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MvcResult mvcResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/v2/api-docs"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MockHttpServletResponse response <span class="token operator">=</span> mvcResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String swaggerJson <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Files<span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>BufferedWriter writer <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">newBufferedWriter</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">,</span> <span class="token string">"swagger.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>swaggerJson<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>System.getProperty(“io.springfox.staticdocs.outputDir”);来自于build.gradle中的配置</p></blockquote><h3 id="2-将json文件转换为adoc文件"><a href="#2-将json文件转换为adoc文件" class="headerlink" title="2. 将json文件转换为adoc文件"></a>2. 将json文件转换为adoc文件</h3><p>转换json文件需要使用到<code>io.github.swagger2markup</code>插件的<code>convertSwagger2markup</code>方法。</p><p>引入相关依赖：</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    dependencies <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        classpath <span class="token string">'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.github.swagger2markup'</span></code></pre><p>配置convertSwagger2markup：</p><pre class=" language-java"><code class="language-java">ext <span class="token punctuation">{</span>    asciiDocOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/asciidoc"</span><span class="token punctuation">)</span>    swaggerOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/swagger"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    systemProperty <span class="token string">'io.springfox.staticdocs.outputDir'</span><span class="token punctuation">,</span> swaggerOutputDir<span class="token punctuation">}</span>convertSwagger2markup <span class="token punctuation">{</span>    dependsOn test    swaggerInput <span class="token string">"${swaggerOutputDir}/swagger.json"</span>    outputDir asciiDocOutputDir    config <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'swagger2markup.pathsGroupedBy'</span> <span class="token operator">:</span> <span class="token string">'TAGS'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>更多config配置可以参考：<a href="http://swagger2markup.github.io/swagger2markup/1.3.3/#_swagger2markup_properties" target="_blank" rel="noopener">http://swagger2markup.github.io/swagger2markup/1.3.3/#_swagger2markup_properties</a></p></blockquote><h3 id="3-将adoc文件转换为PDF文件"><a href="#3-将adoc文件转换为PDF文件" class="headerlink" title="3. 将adoc文件转换为PDF文件"></a>3. 将adoc文件转换为PDF文件</h3><p>转换PDF文件需要用到<code>org.asciidoctor.convert</code>插件的<code>asciidoctor</code>方法。<br>引入相关依赖：</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    dependencies <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        classpath <span class="token string">'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.asciidoctor.convert'</span></code></pre><p><strong>手动编写</strong>index.adoc文件，放置到${asciiDocOutputDir.absolutePath}中：</p><pre><code>// {generated}默认值为${build}/asciidoc// 参见：https://github.com/Swagger2Markup/swagger2markup-gradle-project-templateinclude::{generated}/overview.adoc[]include::{generated}/paths.adoc[]include::{generated}/definitions.adoc[]include::{generated}/security.adoc[]</code></pre><p>配置asciidoctor：</p><pre class=" language-java"><code class="language-java">asciidoctor <span class="token punctuation">{</span>    dependsOn convertSwagger2markup    <span class="token comment" spellcheck="true">// sourceDir中需要包含有之前手动编写的index.adoc文件</span>    <span class="token function">sourceDir</span><span class="token punctuation">(</span>asciiDocOutputDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    sources <span class="token punctuation">{</span>        include <span class="token string">"index.adoc"</span>    <span class="token punctuation">}</span>    backends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pdf'</span><span class="token punctuation">]</span>    attributes <span class="token operator">=</span> <span class="token punctuation">[</span>            doctype<span class="token operator">:</span> <span class="token string">'book'</span><span class="token punctuation">,</span>            toc<span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>            toclevels<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>            numbered<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            sectlinks<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            sectanchors<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            hardbreaks<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            generated<span class="token operator">:</span> asciiDocOutputDir    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="4-编写一个自定义task用来执行上述流程："><a href="#4-编写一个自定义task用来执行上述流程：" class="headerlink" title="4. 编写一个自定义task用来执行上述流程："></a>4. 编写一个自定义task用来执行上述流程：</h3><pre class=" language-java"><code class="language-java">task <span class="token function">genPdf</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Test<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>    include <span class="token string">'**/*SwaggerTest.class'</span>    exclude <span class="token string">'**/*'</span>    <span class="token function">dependsOn</span><span class="token punctuation">(</span>asciidoctor<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>执行genPdf，就可以生成Swagger对应的PDF文件。</p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h3><p>使用此方法步骤还是比较繁琐的，总体来讲就是json -&gt; adoc -&gt; pdf，并且使用此种方法目前有几个比较大的问题我仍然没有找到解决方案：</p><ul><li>从官方文档中可以看到支持的语言默认有EN, DE, FR, RU。没错，不支持CN，从导出的文档也可以看到，部分中文无法显示，目前我也尚未找到是否有配置可以实现这个功能。网上的文章部分是通过替换源代码包里面的字体文件来实现，但是由于后面有更好的解决方案，这里就不再讨论。</li><li>从asciidoctorj-pdf的<code>1.5.0-alpha.16</code>版本以后（目前最新是1.5.0-alpha.18），这种方式生成文件会抛出异常，我个人并没有深究这个异常，有兴趣的读者可以通过修改版本号试一试。</li><li>生成的adoc文件一般包含overview.adoc、paths.adoc、definitions.adoc、security.adoc一共4个文件，这也是为什么要手动编写index.adoc进行整合的原因，感觉不太方便。<br>综上，我个人并不推荐采用此方式生成PDF。</li></ul><p>build.gradle完整文件参考：</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    ext <span class="token punctuation">{</span>        springbootVersion <span class="token operator">=</span> <span class="token string">'2.1.6.RELEASE'</span>    <span class="token punctuation">}</span>    repositories <span class="token punctuation">{</span>        maven <span class="token punctuation">{</span>            url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">"org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"</span>        classpath <span class="token string">'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'</span>        classpath <span class="token string">'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'java'</span>apply plugin<span class="token operator">:</span> <span class="token string">'maven'</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.springframework.boot'</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.spring.dependency-management'</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.github.swagger2markup'</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.asciidoctor.convert'</span>group <span class="token string">'com.jptangchina'</span>version <span class="token string">'1.0-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>targetCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>ext <span class="token punctuation">{</span>    asciiDocOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/asciidoc"</span><span class="token punctuation">)</span>    swaggerOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/swagger"</span><span class="token punctuation">)</span>    swaggerVersion <span class="token operator">=</span> <span class="token string">'2.9.2'</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compile <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compile <span class="token string">"io.springfox:springfox-swagger2:${swaggerVersion}"</span>    compile <span class="token string">"io.springfox:springfox-swagger-ui:${swaggerVersion}"</span>    compile <span class="token string">'io.github.swagger2markup:swagger2markup:1.3.3'</span>    asciidoctor <span class="token string">'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16'</span>    testCompile <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span>    testCompile <span class="token string">'org.springframework.restdocs:spring-restdocs-mockmvc'</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    systemProperty <span class="token string">'io.springfox.staticdocs.outputDir'</span><span class="token punctuation">,</span> swaggerOutputDir<span class="token punctuation">}</span>convertSwagger2markup <span class="token punctuation">{</span>    dependsOn test    swaggerInput <span class="token string">"${swaggerOutputDir}/swagger.json"</span>    outputDir asciiDocOutputDir    config <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'swagger2markup.pathsGroupedBy'</span> <span class="token operator">:</span> <span class="token string">'TAGS'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>asciidoctor <span class="token punctuation">{</span>    dependsOn convertSwagger2markup    <span class="token function">sourceDir</span><span class="token punctuation">(</span>asciiDocOutputDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    sources <span class="token punctuation">{</span>        include <span class="token string">"index.adoc"</span>    <span class="token punctuation">}</span>    backends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pdf'</span><span class="token punctuation">]</span>    attributes <span class="token operator">=</span> <span class="token punctuation">[</span>            doctype<span class="token operator">:</span> <span class="token string">'book'</span><span class="token punctuation">,</span>            toc<span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>            toclevels<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>            numbered<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            sectlinks<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            sectanchors<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            hardbreaks<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            generated<span class="token operator">:</span> asciiDocOutputDir    <span class="token punctuation">]</span><span class="token punctuation">}</span>task <span class="token function">genPdf</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Test<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>    include <span class="token string">'**/*SwaggerTest.class'</span>    exclude <span class="token string">'**/*'</span>    <span class="token function">dependsOn</span><span class="token punctuation">(</span>asciidoctor<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="使用asciidoctor-gradle-plugin生成PDF（推荐）"><a href="#使用asciidoctor-gradle-plugin生成PDF（推荐）" class="headerlink" title="使用asciidoctor-gradle-plugin生成PDF（推荐）"></a>使用asciidoctor-gradle-plugin生成PDF（推荐）</h2><p>asciidoctor-gradle-plugin也是官方推荐的使用方式。相对前面的方式，使用起来更加简单，也可以修改配置输出中文。</p><h3 id="1-引入插件"><a href="#1-引入插件" class="headerlink" title="1. 引入插件"></a>1. 引入插件</h3><pre class=" language-java"><code class="language-java">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.asciidoctor.jvm.pdf'</span> version <span class="token string">'2.2.0'</span><span class="token punctuation">}</span></code></pre><h3 id="2-编写测试类生成adoc"><a href="#2-编写测试类生成adoc" class="headerlink" title="2. 编写测试类生成adoc"></a>2. 编写测试类生成adoc</h3><p>与第一中方法不同的是，不需要再将json文件保存到本地了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generateAsciiDocsToFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String outputDir <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"io.springfox.staticdocs.outputDir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MvcResult mvcResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/v2/api-docs"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Swagger2MarkupConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swagger2MarkupConfigBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withMarkupLanguage</span><span class="token punctuation">(</span>MarkupLanguage<span class="token punctuation">.</span>ASCIIDOC<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withOutputLanguage</span><span class="token punctuation">(</span>Language<span class="token punctuation">.</span>ZH<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withPathsGroupedBy</span><span class="token punctuation">(</span>GroupBy<span class="token punctuation">.</span>TAGS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withGeneratedExamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withoutInlineSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MockHttpServletResponse response <span class="token operator">=</span> mvcResult<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String swaggerJson <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Swagger2MarkupConverter<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>swaggerJson<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>outputDir <span class="token operator">+</span> <span class="token string">"/swagger"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>有兴趣的读者可以阅读下toFile方法的源码，里面对第一种方法生成的4个文件进行了整合，这也是不再需要手动编写index.adoc文件的原因。</p></blockquote><h3 id="3-配置asciidoctorPdf"><a href="#3-配置asciidoctorPdf" class="headerlink" title="3. 配置asciidoctorPdf"></a>3. 配置asciidoctorPdf</h3><pre class=" language-java"><code class="language-java">pdfThemes <span class="token punctuation">{</span>    local <span class="token string">'basic'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        styleDir <span class="token operator">=</span> pdfThemesDir        <span class="token comment" spellcheck="true">// styleName 会被程序用于匹配${styleName}-theme.yml，例如default-styleName-theme.yml</span>        styleName <span class="token operator">=</span> <span class="token string">'default'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>asciidoctorPdf<span class="token punctuation">{</span>    <span class="token function">sourceDir</span><span class="token punctuation">(</span>asciiDocOutputDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    sources <span class="token punctuation">{</span>        include <span class="token string">"swagger.adoc"</span>    <span class="token punctuation">}</span>    <span class="token function">fontsDir</span><span class="token punctuation">(</span>pdfFontsDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">"basic"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>本文字体与主题文件均来自于<code>asciidoctorj-pdf-1.5.0-alpha.18.jar</code>源码包，其路径位于：gems/asciidoctorj-pdf-1.5.0-alpha.18/data</p></blockquote><h3 id="4-复制并修改default-theme-yml文件配置"><a href="#4-复制并修改default-theme-yml文件配置" class="headerlink" title="4. 复制并修改default-theme.yml文件配置"></a>4. 复制并修改default-theme.yml文件配置</h3><p>为了解决中文无法显示的问题，首先需要自行下载一个支持中文的字体文件。</p><p>修改主题文件，将mplus1p-regular-fallback.ttf替换为自己下载的字体文件的名称</p><pre class=" language-yml"><code class="language-yml">M+ 1p Fallback:  normal: your-font.ttf  bold: your-font.ttf  italic: your-font.ttf  bold_italic: your-font.ttf</code></pre><blockquote><p>由于手动指定了字体文件的路径，所以除了中文以外，还<strong>需要将源码中的其他字体文件一并复制到${pdfFontsDir}文件夹</strong>。如果不愿意使用官方的字体，也可以考虑将default-theme.yml中其他的字体文件都修改为自己想要的文件。</p></blockquote><p>保持task genPdf不变，再次运行即可生成PDF文件，生成的文件默认路径为${build}/docs/asciidocPdf</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>asciidoctor-gradle-plugin的方式可以支持配置字体与主题，通过配置不仅规避了中文无法显示的问题，同时使用起来也更加简单。需要注意的是，采用此种方案生成出的文档会在封面写有项目的版本号，此版本号为build.gradle中的version，而非SwaggerConfig类中的version。</p><p>官方提供了很多配置，可以自行参考官方文档查看。</p><p>build.gradle完整文件参考：</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    ext <span class="token punctuation">{</span>        springbootVersion <span class="token operator">=</span> <span class="token string">'2.1.6.RELEASE'</span>    <span class="token punctuation">}</span>    repositories <span class="token punctuation">{</span>        maven <span class="token punctuation">{</span>            url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">"org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>plugins <span class="token punctuation">{</span>    id <span class="token string">'org.asciidoctor.jvm.pdf'</span> version <span class="token string">'2.2.0'</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'java'</span>apply plugin<span class="token operator">:</span> <span class="token string">'maven'</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.springframework.boot'</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.spring.dependency-management'</span>group <span class="token string">'com.jptangchina'</span>version <span class="token string">'1.0-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>targetCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>ext <span class="token punctuation">{</span>    asciiDocOutputDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/asciidoc"</span><span class="token punctuation">)</span>    pdfFontsDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/fonts"</span><span class="token punctuation">)</span>    pdfThemesDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/themes"</span><span class="token punctuation">)</span>    swaggerVersion <span class="token operator">=</span> <span class="token string">'2.9.2'</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compile <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compile <span class="token string">"io.springfox:springfox-swagger2:${swaggerVersion}"</span>    compile <span class="token string">"io.springfox:springfox-swagger-ui:${swaggerVersion}"</span>    compile <span class="token string">'io.github.swagger2markup:swagger2markup:1.3.3'</span>    testCompile <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span>    testCompile <span class="token string">'org.springframework.restdocs:spring-restdocs-mockmvc'</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    systemProperty <span class="token string">'io.springfox.staticdocs.outputDir'</span><span class="token punctuation">,</span> asciiDocOutputDir<span class="token punctuation">}</span>pdfThemes <span class="token punctuation">{</span>    local <span class="token string">'basic'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        styleDir <span class="token operator">=</span> pdfThemesDir        styleName <span class="token operator">=</span> <span class="token string">'default'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>asciidoctorPdf<span class="token punctuation">{</span>    <span class="token function">sourceDir</span><span class="token punctuation">(</span>asciiDocOutputDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    sources <span class="token punctuation">{</span>        include <span class="token string">"swagger.adoc"</span>    <span class="token punctuation">}</span>    <span class="token function">fontsDir</span><span class="token punctuation">(</span>pdfFontsDir<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>    <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">"basic"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>task <span class="token function">genPdf</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Test<span class="token punctuation">,</span> dependsOn<span class="token operator">:</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>    include <span class="token string">'**/*SwaggerTest.class'</span>    exclude <span class="token string">'**/*'</span>    <span class="token function">dependsOn</span><span class="token punctuation">(</span>asciidoctorPdf<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Swagger2Markup/swagger2markup" target="_blank" rel="noopener">https://github.com/Swagger2Markup/swagger2markup</a><br><a href="https://github.com/Swagger2Markup/spring-swagger2markup-demo" target="_blank" rel="noopener">https://github.com/Swagger2Markup/spring-swagger2markup-demo</a><br><a href="http://swagger2markup.github.io/swagger2markup/1.3.3" target="_blank" rel="noopener">http://swagger2markup.github.io/swagger2markup/1.3.3</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> swagger </tag>
            
            <tag> swagger2markup </tag>
            
            <tag> asciidoctor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jxcel - 好用的Excel与Java对象转换工具</title>
      <link href="/2019/06/13/jxcel-hao-yong-de-excel-yu-java-dui-xiang-zhuan-huan-gong-ju/"/>
      <url>/2019/06/13/jxcel-hao-yong-de-excel-yu-java-dui-xiang-zhuan-huan-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="Jxcel简介"><a href="#Jxcel简介" class="headerlink" title="Jxcel简介"></a>Jxcel简介</h2><p>Jxcel是一个支持Java对象与Excel（目前仅xlsx、xls）互相转换的工具包。</p><p>项目地址：<a href="https://github.com/jptangchina/jxcel" target="_blank" rel="noopener">https://github.com/jptangchina/jxcel</a></p><h2 id="特性说明"><a href="#特性说明" class="headerlink" title="特性说明"></a>特性说明</h2><ul><li>Java对象输出为Excel文件或Workbook对象</li><li>语义化转换，将数字类型或布尔类型的值与语义化的值互相转换</li><li>生成的Excel文件可以对列进行排序</li><li>表头与Java属性精确匹配</li><li>支持几乎所有基本数据类型以及日期类型的转换</li><li>日期格式自定义</li><li>表格宽度自适应</li><li>……更多特性</li></ul><h2 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h2><p>以Maven为例，引入Jxcel依赖包：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jptangchina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jxcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jxcel.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="准备数据模型"><a href="#准备数据模型" class="headerlink" title="准备数据模型"></a>准备数据模型</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@JxcelSheet</span><span class="token punctuation">(</span><span class="token string">"学生名单"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"性别"</span><span class="token punctuation">,</span> parse <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"出生日期"</span><span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date birthDay<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JxcelCell</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"手机号"</span><span class="token punctuation">,</span> suffix <span class="token operator">=</span> <span class="token string">"\t"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String mobile<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="导出数据到Excel"><a href="#导出数据到Excel" class="headerlink" title="导出数据到Excel"></a>导出数据到Excel</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 导出为XLS Workbook对象</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateWorkbook</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出为XLSX Workbook对象</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsxGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateWorkbook</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出为XLS文件</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateFile</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出为XLSX文件</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsxGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateFile</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="将Excel解析为Java对象"><a href="#将Excel解析为Java对象" class="headerlink" title="将Excel解析为Java对象"></a>将Excel解析为Java对象</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从文件解析</span>JxcelParser<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseFromFile</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从Workbood对象解析</span>JxcelParser<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseFromWorkbook</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> workbook<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class=" language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"JptangChina"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"18510010000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JxcelGenrator<span class="token punctuation">.</span><span class="token function">xlsxGenrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateFile</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/home/jptangchina/test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出的表格如下：</p><p><img src="https://s2.ax1x.com/2019/06/14/V4Zy8J.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jxcel </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SpringBoot JPA进行自定义的保存及批量保存</title>
      <link href="/2019/06/03/shi-yong-springboot-jpa-jin-xing-zi-ding-yi-de-bao-cun-ji-pi-liang-bao-cun/"/>
      <url>/2019/06/03/shi-yong-springboot-jpa-jin-xing-zi-ding-yi-de-bao-cun-ji-pi-liang-bao-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>SpringBoot版本：2.1.4.RELEASE</p><p>java版本：1.8</p><p>文中所说JPA皆指spring-boot-starter-data-jpa</p><h2 id="使用JPA保存一个Student对象"><a href="#使用JPA保存一个Student对象" class="headerlink" title="使用JPA保存一个Student对象"></a>使用JPA保存一个Student对象</h2><p>在JPA中保存一个对象，仅需要该对象，一个仓储即可。<br>StudentDO实体类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_student"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> String seq<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>JPA仓储：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepo</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>StudentDO<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>一般的，我们只需要调用StudentRepo.save()方法即可完成对实体对象的保存操作。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentDO student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setSeq</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        studentRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="在插入过程中使用mysql函数"><a href="#在插入过程中使用mysql函数" class="headerlink" title="在插入过程中使用mysql函数"></a>在插入过程中使用mysql函数</h2><p>如果我们希望student的seq值由系统自动生成，且生成规则为“yyMMdd + 8位自增序列”（例如19060310000000）又该如何实现呢？</p><p>首先想到的是该如何生成这一串序列，mysql不像oracle自身支持sequence，因此在这里可以借用函数以及额外的sequence表来实现这一操作，网上有很多实现方式，这里就不再赘述。</p><p>现在已经有了函数getseq(‘student_seq’)可以获取到该序列，该如何将其应用到保存对象的方法中？显然的一个问题是，像上面那样再直接调用save方法已经行不通了，应该得需要自定义插入的sql实现。</p><p>一个容易想到的办法是，在StudentDO类上使用注解@SQLInsert来定义insert的实现，它写起来应该会像这个样子：</p><pre><code>@SQLInsert(sql = &quot;INSERT INTO t_student(seq, name, sex) VALUES (getseq(&#39;student_seq&#39;), ?, ?&quot;)</code></pre><p>这条sql语句本身并没有什么问题，再次调用save()方法也确实能够执行。但是很可惜，它确会抛出一个sql异常：</p><pre><code>java.sql.SQLException: Parameter index out of range (3 &gt; number of parameters, which is 2).</code></pre><p>显然是程序认为有多少个参数，就得有多少个“?”与之匹配，目前我并没有找到解决这个问题的方案，所以这种方法宣告失败。</p><p>既然@SQLInsert行不通，或许可以考虑使用@Query注解来自定义一个实现。我们可以在StudentRepo中定义这样一个方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"INSERT INTO t_student(seq, name, sex) VALUES (getseq('student_seq'), :#{#student.name}, :#{#student.sex})"</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span> StudentDO student<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>试着运行一下，结果很成功，对象被正常的存储到数据库中，并且seq的取值也正常。看上去我们的问题已经得到了解决，但事实真的如此么？</p><h2 id="自定义的批量存储"><a href="#自定义的批量存储" class="headerlink" title="自定义的批量存储"></a>自定义的批量存储</h2><p>上面的例子中，我们成功通过JPA调用了mysql函数将对象存储到数据库中。但上面的例子只提供了单个保存的方法，如果我们想批量保存呢？@Query里面的sql能够进行改造么？我并没有找到@Query中使用List<object>作为参数的insert方法，但是这并不代表这一操作不能执行。JPA仍旧提供给了使用者原始的使用方式：利用EntityManager来构造sql并执行。</object></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@PersistenceContext</span>    <span class="token keyword">private</span> EntityManager entityManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">batchInsert</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>StudentDO<span class="token operator">></span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_student(seq, name, sex) VALUES "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>StudentDO student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"(getseq('student_seq'), ?, ?),"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String sql <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createNativeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> paramIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>StudentDO student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>            query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>paramIndex<span class="token operator">++</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>paramIndex<span class="token operator">++</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>就像MyBatis一样，使用者也可以自定义SQL来执行，试试看，同样没有问题，再多的数据也可以被保存到数据库中！批量保存的效果达到了。</p><p>再仔细想一想，通过上面的过程，还有什么问题么？对比JPA自带的save()方法，似乎我们的自定义保存返回的都是int结果，也就是操作影响的数据库行数。使用过JPA的人都应该了解，JPA的save()方法（或者其他JPA方法）返回的对象是经过持久化的，得益于这一特性，使用者可以在调用save()方法之后获取到对象的id等必须先插入到数据库之后才会有的值。显然这里的操作已经失去了这一特性，那如果我们把返回值对应的改为Object或者List<object>可以做到么？答案是并不能，我们会得到如下异常：</object></p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>InvalidDataAccessApiUsageException<span class="token operator">:</span> Modifying queries can only use <span class="token keyword">void</span> or <span class="token keyword">int</span><span class="token operator">/</span>Integer as <span class="token keyword">return</span> type<span class="token operator">!</span><span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token operator">:</span> Modifying queries can only use <span class="token keyword">void</span> or <span class="token keyword">int</span><span class="token operator">/</span>Integer as <span class="token keyword">return</span> type<span class="token operator">!</span></code></pre><p>insert方法必须使用@Modifying进行注解，而@Modifying注解的方法又只能返回int类型的结果。这种情况下或许只能先利用查询得到seq的值再进行操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于JPA的使用还不够了解，一些复杂的情况下没有找到最理想的实现方案。</p><ol><li>@Query注解中是否能够使用List<object>以及实现动态拼接参数的效果没有得到解决</object></li><li>自定义的sql语句返回持久化对象的问题没有方案</li></ol><p>在以后的使用了解中希望能够找到解决办法，将问题记录在这里，以便后续查看。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/13/hello-world/"/>
      <url>/2019/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
